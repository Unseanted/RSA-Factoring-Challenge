#!/usr/bin/python3
import time
import math
import sys

def pollard_rho(n):
	# Check if the number is even
	if n % 2 == 0:
		return 2
	
	x = 2
	y = 2
	d = 1
	
	# Define the function for generating the next value in the sequence
	f = lambda x: (x**2 + 1) % n
	
	# Pollard's rho algorithm
	while d == 1:
		# Generate new values for x and y using the function f(x)
		x = f(x)
		# Update x with the next value generated by applying f(x)
		y = f(f(y))
		# Update y with the next value generated by applying f(f(y))
		d = math.gcd(abs(x - y), n)
	
	return d

def is_prime(num):
	# Check if a number is prime
	if num < 2:
		# If num is less than 2, it is not prime, so return False
		return False
	for i in range(2, int(math.sqrt(num)) + 1):
		# If num is divisible by any number in the range [2, sqrt(num)],\
		#        it is not prime, so return False
		if num % i == 0:
			return False
	# If num is not divisible by any number in the \
	#        range [2, sqrt(num)], it is prime, so return True
	return True

def main():
	# Check if the correct number of command-line arguments is provided
	if len(sys.argv) != 2:
		print("Usage: python factorize.py <file>")
		return

	file_path = sys.argv[1]

	start_time = time.time()
	try:
		with open(file_path, 'r') as file:
			# Read the first line of the file and convert it to an integer
			number = int(file.readline().strip())
		# Factorize the number using Pollard's rho algorithm
		p = pollard_rho(number)
		# Continue factorizing until a prime factor is found
		while not is_prime(p):
			p = pollard_rho(p)
		q = number // p
		# The number is prime
		if p == number or q == number:
			print(f"{number} is prime.")
		else:
			# Print the prime factors
			print(f"{number}={p}*{q}")

		if time.time() - start_time > 5:
			print("Time limit exceeded")
			exit()
	
	except FileNotFoundError:
		print(f"File '{file_path}' not found.")


if __name__ == '__main__':
	main()

#!/usr/bin/python3
def magic_calculation(a, b):
	result = 0
	for i in range(1, 3):
		try:
			if i > a:
				raise Exception('Too far')
			result += a ** b / i
		except Exception:
			result = b + a
			break
	return result

#include <Python.h>
#include <stdio.h>
/**
 * print_python_float - gives data of the PyFloatObject
 * @p: the PyObject
 */
void print_python_float(PyObject *p)
{
	double value = 0;
	char *string = NULL;

	fflush(stdout);
	printf("[.] float object info\n");

	if (!PyFloat_CheckExact(p))
	{
		printf("  [ERROR] Invalid Float Object\n");
		return;
	}
	value = ((PyFloatObject *)p)->ob_fval;
	string = PyOS_double_to_string(value, 'r', 0, Py_DTSF_ADD_DOT_0, NULL);
	printf("  value: %s\n", string);
}
/**
 * print_python_bytes - gives data of the PyBytesObject
 * @p: the PyObject
 */
void print_python_bytes(PyObject *p)
{
	Py_ssize_t size = 0, i = 0;
	char *string = NULL;

	fflush(stdout);
	printf("[.] bytes object info\n");
	if (!PyBytes_CheckExact(p))
	{
		printf("  [ERROR] Invalid Bytes Object\n");
		return;
	}
	size = PyBytes_Size(p);
	printf("  size: %zd\n", size);
	string = (assert(PyBytes_Check(p)), (((PyBytesObject *)(p))->ob_sval));
	printf("  trying string: %s\n", string);
	printf("  first %zd bytes:", size < 10 ? size + 1 : 10);
	while (i < size + 1 && i < 10)
	{
		printf(" %02hhx", string[i]);
		i++;
	}
	printf("\n");
}
/**
 * print_python_list - gives data of the PyListObject
 * @p: the PyObject
 */
void print_python_list(PyObject *p)
{
	Py_ssize_t size = 0;
	PyObject *item;
	int i = 0;

	fflush(stdout);
	printf("[*] Python list info\n");
	if (PyList_CheckExact(p))
	{
		size = PyList_GET_SIZE(p);
		printf("[*] Size of the Python List = %zd\n", size);
		printf("[*] Allocated = %lu\n", ((PyListObject *)p)->allocated);
		while (i < size)
		{
			item = PyList_GET_ITEM(p, i);
			printf("Element %d: %s\n", i, item->ob_type->tp_name);
			if (PyBytes_Check(item))
				print_python_bytes(item);
			else if (PyFloat_Check(item))
				print_python_float(item);
			i++;
		}
	}
	else
		printf("  [ERROR] Invalid List Object\n");
}